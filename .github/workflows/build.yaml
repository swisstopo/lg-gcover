name: Build Python Package

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches: [ master, develop ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ master, develop ]
env:
  CONDA_ENV: GCOVER_TEST
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          auto-update-conda: true
          channels: conda-forge,defaults
          channel-priority: true
          activate-environment: ${{ env.CONDA_ENV }}


      - name: Cache conda environment
        uses: actions/cache@v3
        with:
          path: |
            /usr/share/miniconda3/envs/${{ env.CONDA_ENV }}
            /usr/share/miniconda3/pkgs
          key: conda-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/conda-recipe/meta.yaml') }}
          restore-keys: |
            conda-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install build tools
        shell: bash -el {0}
        run: |
          conda install -y \
          pip \
          gdal \
          geopandas \
          shapely \
          pandas \
          click \
          rich \
          pydantic \
          pyyaml \
          structlog \
          python-dotenv \
          pytest \
          pytest-cov \
          black \
          ruff conda-build pip setuptools setuptools-scm build
          conda list

      - name: Install test dependencies
        shell: bash -l {0}
        run: |
          pip install -e ".[dev,docs,cloud,viz]"

      - name: Check installation
        shell: bash -l {0}
        run: |
          # Verify key imports work
          python -c "import geopandas; print(f'GeoPandas: {geopandas.__version__}')"
          python -c "from osgeo import gdal; print(f'GDAL: {gdal.__version__}')"
          python -c "import gcover; print(f'GCover: {gcover.__version__}')"



      #- name: Run ruff linter
      #  run: |
      #    ruff check src/ --output-format=github

      - name: Run smoke tests
        shell: bash -l {0}
        run: |
          GCOVER_ENVIRONMENT=test  pytest tests/test_imports.py tests/test_cli_smoke.py -v --no-cov  

      - name: Run all tests (allow failures for now)
        shell: bash -l {0}
        run: |
          GCOVER_ENVIRONMENT=test  pytest tests/ -v --tb=short || echo "Some tests failed - expected during cleanup"
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
          python-version: ${{ env.PYTHON_VERSION }}
          auto-update-conda: true
          channels: conda-forge,defaults
          channel-priority: true
          activate-environment: ${{ env.CONDA_ENV }}

    - name: Cache conda environment
      uses: actions/cache@v3
      with:
          path: |
            /usr/share/miniconda3/envs/${{ env.CONDA_ENV }}
            /usr/share/miniconda3/pkgs
          key: conda-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/conda-recipe/meta.yaml') }}
          restore-keys: |
            conda-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

    - name: Check conda installation
      shell: bash -el {0}
      run: |
          conda info
          conda list
          python --version
          which python
          echo "Python path: $(which python)"
          echo "Conda env: $CONDA_DEFAULT_ENV"

    - name: Install build tools
      shell: bash -el {0}
      run: |
        conda install -y conda-build pip setuptools setuptools-scm build gdal

    - name: Get version from SCM
      shell: bash -el {0}
      id: get_version
      run: |
        echo "version=$(python -m setuptools_scm)" >> "$GITHUB_OUTPUT"

    - name: Display version
      shell: bash -el {0}
      run: |
        echo "Detected version: ${{ steps.get_version.outputs.version }}"

    - name: Find conda build artifacts
      shell: bash -el {0}
      id: find_artifacts
      run: |
        # Get the conda build output path directly
        CONDA_OUTPUT=$(conda build conda-recipe --output)
        CONDA_BLD_DIR=$(dirname "$CONDA_OUTPUT")
        echo "conda_build_path=$CONDA_BLD_DIR" >> "$GITHUB_OUTPUT"
        echo "conda_output_file=$CONDA_OUTPUT" >> "$GITHUB_OUTPUT"
        echo "Conda build directory: $CONDA_BLD_DIR"
        echo "Conda output file: $CONDA_OUTPUT"

    - name: Conda build with dynamic version
      shell: bash -el {0}
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.get_version.outputs.version }}
      run: |
        conda build conda-recipe

    - name: Upload Conda build artifacts
      uses: actions/upload-artifact@v4
      with:
          name: conda-artifacts
          path: ${{ steps.find_artifacts.outputs.conda_build_path }}
          if-no-files-found: warn

    - name: Build Python wheel
      shell: bash -el {0}
      run: |
              python -m build

    - name: Upload built artifacts
      uses: actions/upload-artifact@v4
      with:
              name: dist-artifacts
              path: dist/
              if-no-files-found: error



